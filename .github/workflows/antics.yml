# This is a basic workflow that is manually triggered

name: youtube antics (original

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      channellink:
        description: 'Channel Link: '
        default: ''
        required: true
      audioonly:
        description: 'Audio Only? '
        default: 'JAJAJAJAJA'
        required: true
      archivefilename:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Archive Filename: '
        # Default value if no value is explicitly provided
        default: ''
        # Input has to be provided for the workflow to run
        required: false
      mysteriousbashscripturl:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'URL of the mysterious bash script that would apply for every rar archive made in the process: '
        # Default value if no value is explicitly provided
        default: ''
        # Input has to be provided for the workflow to run
        required: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "pixivdump"
  youtubedump:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Checkout Codes
      uses: actions/checkout@v2

    - name: Start Analyzing
      run: |
        wget "https://github.com/yt-dlp/yt-dlp/releases/download/2021.12.27/yt-dlp.tar.gz"
        tar -xvzf yt-dlp.tar.gz
        chmod +x yt-dlp
        wget "https://www.rarlab.com/rar/rarlinux-x64-6.0.2.tar.gz"
        tar -xvzf rarlinux-x64-6.0.2.tar.gz
        chmod +x rar/rar
        mkdir wiebitte; cd wiebitte
        [ "${{ github.event.inputs.audioonly }}" == "JAJAJAJAJA" ] && ../yt-dlp/yt-dlp -f 'bestaudio[ext=m4a]/mp4' --concurrent-fragments 114514 -o "%(upload_date)s.%(id)s.%(title)s.%(ext)s" "${{ github.event.inputs.channellink }}" || ../yt-dlp/yt-dlp -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4' --concurrent-fragments 114514 -o "%(upload_date)s.%(id)s.%(title)s.%(ext)s" "${{ github.event.inputs.channellink }}"
        ls > ../list
        cd ..
    
    - name: Pre-processing
      if: hashFiles('list')
      continue-on-error: true
      run: |
        [ "${{ github.event.inputs.archivefilename }}" ] && filename="${{ github.event.inputs.archivefilename }}" || filename="${${{ github.event.inputs.channellink }}##*/}"
        mv "wiebitte" "$filename"
        rar/rar a -df -ep1 -htb -m0 -ma5 -rr5 -ts -tsp -ol "$filename.rar" "$filename"
        if [ "${{ github.event.inputs.mysteriousbashscripturl }}" ]; then mysteriousbashscripturl="${{ github.event.inputs.mysteriousbashscripturl }}"; wget "$mysteriousbashscripturl" > /dev/null 2> /dev/null; for file in `ls | grep -E "\.rar$"`; do bash "${mysteriousbashscripturl##*/}" "$file" > /dev/null 2> /dev/null; done; fi; rm "${mysteriousbashscripturl##*/}" -f
    
    - name: Upload "Artifact"
      if: hashFiles('*.rar')
      uses: actions/upload-artifact@v2
      with:
        name: wiebitte
        path: "*.rar"

    - name: Pre-Cleanup
      if: hashFiles('*.114514')
      run: |
        for file in `ls | grep -E "\.114514$"`; do mv "$file" "${file%.114514}"; done

    - name: Cleanup
      if: hashFiles('*.rar')
      run: |
        ls -lh
        echo
        stat *
        rm *.rar -f

    - name: Pre-processing Partplaceholder
      if: hashFiles('list')
      continue-on-error: true
      run: |
        [ "${{ github.event.inputs.archivefilename }}" ] && filename="${{ github.event.inputs.archivefilename }}" || filename="${${{ github.event.inputs.channellink }}##*/}"
        mv "wiebitte" "$filename"
        rar/rar a -df -ep1 -htb -m0 -ma5 -rr5 -ts -tsp -ol "$filename.partplaceholder.rar" "$filename"
        if [ "${{ github.event.inputs.mysteriousbashscripturl }}" ]; then mysteriousbashscripturl="${{ github.event.inputs.mysteriousbashscripturl }}"; wget "$mysteriousbashscripturl" > /dev/null 2> /dev/null; for file in `ls | grep -E "\.rar$"`; do bash "${mysteriousbashscripturl##*/}" "$file" > /dev/null 2> /dev/null; done; fi; rm "${mysteriousbashscripturl##*/}" -f
    
    - name: Upload "Artifact" Partplaceholder
      if: hashFiles('*.rar')
      uses: actions/upload-artifact@v2
      with:
        name: wiebitte
        path: "*.rar"

    - name: Pre-Cleanup Partplaceholder
      if: hashFiles('*.114514')
      run: |
        for file in `ls | grep -E "\.114514$"`; do mv "$file" "${file%.114514}"; done

    - name: Cleanup Partplaceholder
      if: hashFiles('*.rar')
      run: |
        ls -lh
        echo
        stat *
        rm *.rar -f
